" Syntastic {
    " toggle syntastic
    nmap <leader>s :SyntasticToggleMode<cr>
    " configure syntastic syntax checking to check on open as well as save
    let g:syntastic_check_on_open=1
    let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
    " allow es5 mode when looking at TypeScript
    let g:syntastic_typescript_tsc_args = '--module amd --target ES5 --noImplicitAny'
    let g:syntastic_typescript_checkers = ['tslint']
    let g:syntastic_javascript_checkers = ['jshint', 'jscs']
" }

" javascript-libraries-syntax.vim {
    let g:used_javascript_libs = 'jquery,underscore,angularjs'
" }

" vim-airline {
    " Set configuration options for the statusline plugin vim-airline.
    " Use the powerline theme and optionally enable powerline symbols.
    " To use the symbols , , , , , , and .in the statusline
    " segments add the following to your .vimrc.before.local file:
    "   let g:airline_powerline_fonts=1
    " If the previous symbols do not render for you then install a
    " powerline enabled font.

    " See `:echo g:airline_theme_map` for some more choices
    " Default in terminal vim is 'dark'
    if !exists('g:airline_theme')
      let g:airline_theme = 'solarized'
    endif
    if !exists('g:airline_powerline_fonts')
      " Use the default set of separators with a few customizations
      let g:airline_left_sep='›'  " Slightly fancier than '>'
      let g:airline_right_sep='‹' " Slightly fancier than '<'
    endif
" }

" NerdTree {
    "map <leader>n <plug>NERDTreeTabsToggle<CR>
    nmap <F5> :NERDTreeToggle<CR>
    nmap <leader>nt :NERDTreeFind<CR>

    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.sw[op]$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '\.js.map$']
    let NERDTreeChDirMode=0
    let NERDTreeQuitOnOpen=1
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let g:nerdtree_tabs_open_on_gui_startup=0
" }

" UndoTree {
    nnoremap <Leader>u :UndotreeToggle<CR>
    let g:undotree_SetFocusWhenToggle=1 " if undotree is opened, it is likely one wants to interact with it.
" }

" YouCompleteMe {
        " Disable AutoComplPop.
        let g:acp_enableAtStartup = 0

        let g:ycm_path_to_python_interpreter = '/usr/local/opt/python/bin/python'

        " enable completion from tags
        let g:ycm_collect_identifiers_from_tags_files = 1

        " remap Ultisnips for compatibility for YCM
        let g:UltiSnipsExpandTrigger = '<C-k>'
        let g:UltiSnipsJumpForwardTrigger = '<C-k>'
        let g:UltiSnipsJumpBackwardTrigger = '<C-j>'
        " If you want :UltiSnipsEdit to split your window.
        "let g:UltiSnipsEditSplit="vertical"

        " Enable omni completion.
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
        autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

        " Haskell post write lint and check with ghcmod
        " $ `cabal install ghcmod` if missing and ensure
        " ~/.cabal/bin is in your $PATH.
        if !executable("ghcmod")
            autocmd BufWritePost *.hs GhcModCheckAndLintAsync
        endif

        " For snippet_complete marker.
        "if !exists("g:spf13_no_conceal")
            "if has('conceal')
                "set conceallevel=2 concealcursor=i
            "endif
        "endif
" }

" vim-xkbswitch {
    let g:XkbSwitchEnabled = 1
    let g:XkbSwitchLib = '/usr/local/lib/libInputSourceSwitcher.dylib'
" }

" tagbar {
    nmap <F8> :TagbarToggle<CR>
" }

" Session List {
    set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
    nmap <leader>sl :SessionList<CR>
    nmap <leader>ss :SessionSave<CR>
" }

" JSON {
    "nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
" }

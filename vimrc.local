" Syntastic {
    " toggle syntastic
    nmap <leader>s :SyntasticToggleMode<cr>
    " configure syntastic syntax checking to check on open as well as save
    let g:syntastic_check_on_open=1
    let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
    " allow es5 mode when looking at TypeScript
    "let g:syntastic_typescript_tsc_args = '--module amd --target ES5 --noImplicitAny'
    "let g:syntastic_typescript_checkers = ['tslint']
    "let g:syntastic_javascript_checkers = ['jshint']
    let g:syntastic_javascript_checkers = ['eslint']
" }

" mxw/vim-jsx {
		let g:jsx_ext_required = 0 " Allow JSX in normal JS files
" }

" javascript-libraries-syntax.vim {
    let g:used_javascript_libs = 'jquery,underscore,react'
" }

" vim-airline {
    " Set configuration options for the statusline plugin vim-airline.
    " Use the powerline theme and optionally enable powerline symbols.
    " To use the symbols , , , , , , and .in the statusline
    " segments add the following to your .vimrc.before.local file:
    let g:airline_powerline_fonts=1
    " If the previous symbols do not render for you then install a
    " powerline enabled font.

    " See `:echo g:airline_theme_map` for some more choices
    " Default in terminal vim is 'dark'
    if !exists('g:airline_theme')
      let g:airline_theme = 'solarized'
    endif
    if !exists('g:airline_powerline_fonts')
      " Use the default set of separators with a few customizations
      let g:airline_left_sep='›'  " Slightly fancier than '>'
      let g:airline_right_sep='‹' " Slightly fancier than '<'
    endif
" }

" NerdTree {
    "map <leader>n <plug>NERDTreeTabsToggle<CR>
    nmap <F3> :NERDTreeToggle<CR>
    nmap <leader>nt :NERDTreeFind<CR>

    let NERDTreeShowBookmarks=1
    let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.sw[op]$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$', '\.js.map$']
    let NERDTreeChDirMode=0
    let NERDTreeQuitOnOpen=1
    let NERDTreeMouseMode=2
    let NERDTreeShowHidden=1
    let NERDTreeKeepTreeInNewTab=1
    let g:nerdtree_tabs_open_on_gui_startup=0
" }

" UndoTree {
    nnoremap <Leader>u :UndotreeToggle<CR>
    let g:undotree_SetFocusWhenToggle=1 " if undotree is opened, it is likely one wants to interact with it.
" }

" YouCompleteMe {

        " make YCM not use Tab key
        " Don’t worry, you still be able to cycle through completion with <C-N> and <C-P> keys.
        "let g:ycm_key_list_select_completion=[]
        "let g:ycm_key_list_previous_completion=[]

        "let g:ycm_path_to_python_interpreter = '/usr/local/opt/python/bin/python'

        " enable completion from tags
        let g:ycm_collect_identifiers_from_tags_files = 1

        " Enable omni completion.
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
        autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc

" }

" Ultisnips {
        let g:UltiSnipsExpandTrigger = '<C-k>'
        "let g:UltiSnipsJumpForwardTrigger = '<C-k>'
        "let g:UltiSnipsJumpBackwardTrigger = '<C-j>'
        let g:UltiSnipsJumpForwardTrigger = '<C-@>'  " Ctrl-Space
        "let g:UltiSnipsJumpBackwardTrigger = '<space>'
        "let g:UltiSnipsSnippetDirectories=["UltiSnips"]
        " If you want :UltiSnipsEdit to split your window.
        "let g:UltiSnipsEditSplit="vertical"

        " Expand snippets or return cr
        " http://www.reddit.com/r/vim/comments/2oeqrg/using_ultisnips_for_pair_completions/
        function! ExpandSnippet()
            call UltiSnips#ExpandSnippet()
            if g:ulti_expand_res == 0
                return "\<CR>"
            endif
            return ""
        endfunction

        inoremap <expr> <CR> "\<C-R>=ExpandSnippet()\<CR>"
" }

" CtrlP {
	let g:ctrlp_cmd = 'CtrlPBuffer'
	"let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:10'
	let g:ctrlp_match_window = 'max:12'
	"let g:ctrlp_match_window = 'results:12'
	"let g:ctrlp_show_hidden = 1
	let g:ctrlp_custom_ignore = {
		\ 'dir':  '\v[\/]\.(git|hg|svn|idea)$',
		\ 'file': '\v\.(exe|so|dll|class)$',
	\ }

	"let g:ctrlp_user_command = '/usr/local/bin/ag %s -l --nocolor --hidden -g ""'
	" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
	if executable('ag')
		" Use Ag over Grep
		set grepprg=ag\ --nogroup\ --nocolor
		" Use ag in CtrlP for listing files, unless root dir is under git
		let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files', 'ag %s -l --nocolor --hidden -g ""']
	else
		let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files']
	endif
" }

" tagbar {
    nmap <F8> :TagbarToggle<CR>
" }

" Session List {
    set sessionoptions=blank,buffers,curdir,folds,tabpages,winsize
    nmap <leader>sl :SessionList<CR>
    nmap <leader>ss :SessionSave<CR>
" }

" emmet {
    let g:user_emmet_leader_key='<C-d>'
" }

" dash {
    nmap <silent> <leader>d <Plug>DashSearch
" }

" jiangmiao/auto-pairs {
    let g:AutoPairsFlyMode = 1
    let g:AutoPairsShortcutBackInsert = '<C-b>'
" }

" vim-xkbswitch {
    let g:XkbSwitchEnabled = 1
    let g:XkbSwitchLib = '/usr/local/lib/libxkbswitch.dylib'
    "let g:XkbSwitchLib = '/usr/local/lib/libInputSourceSwitcher.dylib'
" }
